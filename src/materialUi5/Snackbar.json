{
  "name": "Snackbar",
  "props": {
    "action": {
      "description": "The action to display. It renders after the message, at the end of the snackbar.",
      "description_zh": "要显示的操作。它呈现在消息之后，在小吃栏的末尾。",
      "default": "-",
      "value": "",
      "type": "node",
      "required": false
    },
    "anchorOrigin": {
      "description": "The anchor of the Snackbar. On smaller screens, the component grows to occupy all the available width, the horizontal alignment is ignored.",
      "description_zh": "小吃店的主播。在较小的屏幕上，组件增长到占据所有可用宽度，水平对齐被忽略。",
      "default": "{ vertical: 'bottom', horizontal: 'left' }",
      "value": "",
      "type": "{ horizontal: center| left| right, vertical: bottom| top }",
      "required": false
    },
    "autoHideDuration": {
      "description": "The number of milliseconds to wait before automatically calling the onClose function. onClose should then set the state of the open prop to hide the Snackbar. This behavior is disabled by default with the null value.",
      "description_zh": "在自动调用 onClose 函数之前等待的毫秒数。然后，onClose 应该设置打开的 prop 的状态以隐藏 Snackbar。默认情况下，此行为处于禁用状态，值为 null。",
      "default": "null",
      "value": "",
      "type": "number",
      "required": false
    },
    "children": {
      "description": "Replace the SnackbarContent component.",
      "description_zh": "替换 SnackbarContent 组件。",
      "default": "-",
      "value": "",
      "type": "element",
      "required": false
    },
    "classes": {
      "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
      "description_zh": "覆盖或扩展应用于组件的样式。有关详细信息，请参阅下面的 CSS 类 API。",
      "default": "-",
      "value": "",
      "type": "object",
      "required": false
    },
    "ClickAwayListenerProps": {
      "description": "Props applied to the ClickAwayListener element.",
      "description_zh": "应用于 ClickAwayListener 元素的道具。",
      "default": "-",
      "value": "",
      "type": "object",
      "required": false
    },
    "ContentProps": {
      "description": "Props applied to the SnackbarContent element.",
      "description_zh": "应用于 SnackbarContent 元素的道具。",
      "default": "-",
      "value": "",
      "type": "object",
      "required": false
    },
    "disableWindowBlurListener": {
      "description": "If true, the autoHideDuration timer will expire even if the window is not focused.",
      "description_zh": "如果为 true，则即使窗口未聚焦，autoHideDuration 计时器也会过期。",
      "default": "false",
      "value": "",
      "type": "bool",
      "required": false
    },
    "key": {
      "description": "When displaying multiple consecutive snackbars using a single parent-rendered <Snackbar/>, add the key prop to ensure independent treatment of each message. For instance, use <Snackbar key={message} />. Otherwise, messages might update in place, and features like autoHideDuration could be affected.",
      "description_zh": "当使用单个父渲染<Snackbar/>显示多个连续的零食栏时，添加关键道具以确保对每条消息的独立处理。例如，使用 <Snackbar key={message} />。否则，消息可能会就地更新，并且 autoHideDuration 等功能可能会受到影响。",
      "default": "-",
      "value": "",
      "type": "any",
      "required": false
    },
    "message": {
      "description": "The message to display.",
      "description_zh": "要显示的消息。",
      "default": "-",
      "value": "",
      "type": "node",
      "required": false
    },
    "onClose": {
      "description": "Callback fired when the component requests to be closed. Typically onClose is used to set state in the parent component, which is used to control the Snackbar open prop. The reason parameter can optionally be used to control the response to onClose, for example ignoring clickaway.Signature:function(event: React.SyntheticEvent | Event, reason: string) => voidevent The event source of the callback.reason Can be: \"timeout\" (autoHideDuration expired), \"clickaway\", or \"escapeKeyDown\".",
      "description_zh": "当组件请求关闭时触发回调。通常，onClose 用于在父组件中设置状态，用于控制 Snackbar 打开道具。可以选择使用 reason 参数来控制对 onClose 的响应，例如忽略 clickaway。签名：function（event： React.SyntheticEvent |Event， reason： string） => voidevent callback.reason 的事件源可以是：“timeout”（autoHideDuration 已过期）、“clickaway”或“escapeKeyDown”。",
      "default": "-",
      "value": "",
      "type": "func",
      "required": false
    },
    "open": {
      "description": "If true, the component is shown.",
      "description_zh": "如果为 true，则显示组件。",
      "default": "-",
      "value": "",
      "type": "bool",
      "required": false
    },
    "resumeHideDuration": {
      "description": "The number of milliseconds to wait before dismissing after user interaction. If autoHideDuration prop isn't specified, it does nothing. If autoHideDuration prop is specified but resumeHideDuration isn't, we default to autoHideDuration / 2 ms.",
      "description_zh": "用户交互后关闭之前等待的毫秒数。如果未指定 autoHideDuration 属性，则它不执行任何操作。如果指定了 autoHideDuration 属性但未指定 resumeHideDuration，则默认为 autoHideDuration / 2 毫秒。",
      "default": "-",
      "value": "",
      "type": "number",
      "required": false
    },
    "sx": {
      "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
      "description_zh": "允许定义系统覆盖以及其他 CSS 样式的系统属性。有关更多详细信息，请参阅“sx”页面。",
      "default": "-",
      "value": "",
      "type": "Array<func| object| bool>| func| object",
      "required": false
    },
    "TransitionComponent": {
      "description": "The component used for the transition. Follow this guide to learn more about the requirements for this component.",
      "description_zh": "用于过渡的组件。按照本指南了解有关此组件要求的详细信息。",
      "default": "Grow",
      "value": "",
      "type": "elementType",
      "required": false
    },
    "transitionDuration": {
      "description": "The duration for the transition, in milliseconds. You may specify a single timeout for all transitions, or individually with an object.",
      "description_zh": "转换的持续时间，以毫秒为单位。您可以为所有过渡指定单个超时，也可以单独指定一个对象超时。",
      "default": "{\n  enter: theme.transitions.duration.enteringScreen,\n  exit: theme.transitions.duration.leavingScreen,\n}",
      "value": "",
      "type": "number| { appear?: number, enter?: number, exit?: number }",
      "required": false
    },
    "TransitionProps": {
      "description": "Props applied to the transition element. By default, the element is based on this Transition component.",
      "description_zh": "应用于过渡元素的道具。默认情况下，该元素基于此 Transition 组件。",
      "default": "{}",
      "value": "",
      "type": "object",
      "required": false
    }
  },
  "link": "https://mui.com/material-ui/api/snackbar/",
  "link_zh": "https://mui.com/material-ui/api/snackbar/",
  "typeDetail": {},
  "events": [
    {
      "name": "onClose",
      "description": "Callback fired when the component requests to be closed. Typically  is used to set state in the parent component, which is used to control the Snackbar open prop. The reason parameter can optionally be used to control the response to onClose, for example ignoring clickaway.Signature:function(event: React.SyntheticEvent | Event, reason: string) => voidevent The event source of the callback.reason Can be: \"timeout\" (autoHideDuration expired), \"clickaway\", or \"escapeKeyDown\".",
      "description_zh": "当组件请求关闭时触发回调。通常用于在父组件中设置状态，用于控制 Snackbar open prop。可以选择使用 reason 参数来控制对 onClose 的响应，例如忽略 clickaway。签名：function（event： React.SyntheticEvent |Event， reason： string） => voidevent callback.reason 的事件源可以是：“timeout”（autoHideDuration 已过期）、“clickaway”或“escapeKeyDown”。",
      "params": "onClose",
      "value": ""
    }
  ],
  "methods": [],
  "slots": [],
  "suggestions": [],
  "filename": "Snackbar"
}
