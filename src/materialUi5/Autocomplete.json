{
  "name": "Autocomplete",
  "props": {
    "options": {
      "description": "Array of options.",
      "description_zh": "选项数组。",
      "default": "-",
      "value": "",
      "type": "array",
      "required": true
    },
    "renderInput": {
      "description": "Render the input.Signature:function(params: object) => ReactNode",
      "description_zh": "呈现输入。签名：function（params： object） => ReactNode",
      "default": "-",
      "value": "",
      "type": "func",
      "required": true
    },
    "autoComplete": {
      "description": "If true, the portion of the selected suggestion that the user hasn't typed, known as the completion string, appears inline after the input cursor in the textbox. The inline completion string is visually highlighted and has a selected state.",
      "description_zh": "如果为 true，则用户尚未键入的所选建议部分（称为完成字符串）将内联显示在文本框中的输入光标之后。内联完成字符串在视觉上突出显示，并具有选定状态。",
      "default": "false",
      "value": "",
      "type": "bool",
      "required": false
    },
    "autoHighlight": {
      "description": "If true, the first option is automatically highlighted.",
      "description_zh": "如果为 true，则第一个选项将自动突出显示。",
      "default": "false",
      "value": "",
      "type": "bool",
      "required": false
    },
    "autoSelect": {
      "description": "If true, the selected option becomes the value of the input when the Autocomplete loses focus unless the user chooses a different option or changes the character string in the input.When using the freeSolo mode, the typed value will be the input value if the Autocomplete loses focus without highlighting an option.",
      "description_zh": "如果为 true，则当“自动完成”失去焦点时，所选选项将成为输入的值，除非用户选择其他选项或更改输入中的字符串。使用 freeSolo 模式时，如果“自动完成”失去焦点而不突出显示选项，则键入的值将是输入值。",
      "default": "false",
      "value": "",
      "type": "bool",
      "required": false
    },
    "blurOnSelect": {
      "description": "Control if the input should be blurred when an option is selected:\n\nfalse the input is not blurred.\ntrue the input is always blurred.\ntouch the input is blurred after a touch event.\nmouse the input is blurred after a mouse event.\n\n",
      "description_zh": "控制选择选项时输入是否应模糊：\n\nfalse 输入不模糊。\ntrue 输入始终模糊。\n触摸 触摸事件后输入模糊。\n鼠标 鼠标事件后输入模糊。",
      "default": "false",
      "value": "",
      "type": "mouse| touch| bool",
      "required": false
    },
    "ChipProps": {
      "description": "Props applied to the Chip element.",
      "description_zh": "应用于 Chip 元素的道具。",
      "default": "-",
      "value": "",
      "type": "object",
      "required": false
    },
    "classes": {
      "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
      "description_zh": "覆盖或扩展应用于组件的样式。有关详细信息，请参阅下面的 CSS 类 API。",
      "default": "-",
      "value": "",
      "type": "object",
      "required": false
    },
    "clearIcon": {
      "description": "The icon to display in place of the default clear icon.",
      "description_zh": "要代替默认清除图标显示的图标。",
      "default": "<ClearIcon fontSize=\"small\" />",
      "value": "",
      "type": "node",
      "required": false
    },
    "clearOnBlur": {
      "description": "If true, the input's text is cleared on blur if no value is selected.Set it to true if you want to help the user enter a new value. Set it to false if you want to help the user resume their search.",
      "description_zh": "如果为 true，则如果未选择任何值，则在模糊时清除输入的文本。如果要帮助用户输入新值，请将其设置为 true。如果要帮助用户恢复搜索，请将其设置为 false。",
      "default": "!props.freeSolo",
      "value": "",
      "type": "bool",
      "required": false
    },
    "clearOnEscape": {
      "description": "If true, clear all values when the user presses escape and the popup is closed.",
      "description_zh": "如果为 true，则在用户按 escape 键并关闭弹出窗口时清除所有值。",
      "default": "false",
      "value": "",
      "type": "bool",
      "required": false
    },
    "clearText": {
      "description": "Override the default text for the clear icon button.For localization purposes, you can use the provided translations.",
      "description_zh": "覆盖清除图标按钮的默认文本。出于本地化目的，您可以使用提供的翻译。",
      "default": "Clear",
      "value": "",
      "type": "string",
      "required": false
    },
    "closeText": {
      "description": "Override the default text for the close popup icon button.For localization purposes, you can use the provided translations.",
      "description_zh": "覆盖关闭弹出图标按钮的默认文本。出于本地化目的，您可以使用提供的翻译。",
      "default": "Close",
      "value": "",
      "type": "string",
      "required": false
    },
    "componentsProps": {
      "description": "The props used for each slot inside.",
      "description_zh": "里面每个插槽使用的道具。",
      "default": "{}",
      "value": "",
      "type": "{ clearIndicator?: object, paper?: object, popper?: object, popupIndicator?: object }",
      "required": false
    },
    "defaultValue": {
      "description": "The default value. Use when the component is not controlled.",
      "description_zh": "默认值。在组件不受控制时使用。",
      "default": "props.multiple ? [] : null",
      "value": "",
      "type": "any",
      "required": false
    },
    "disableClearable": {
      "description": "If true, the input can't be cleared.",
      "description_zh": "如果为 true，则无法清除输入。",
      "default": "false",
      "value": "",
      "type": "bool",
      "required": false
    },
    "disableCloseOnSelect": {
      "description": "If true, the popup won't close when a value is selected.",
      "description_zh": "如果为 true，则在选择值时不会关闭弹出窗口。",
      "default": "false",
      "value": "",
      "type": "bool",
      "required": false
    },
    "disabled": {
      "description": "If true, the component is disabled.",
      "description_zh": "如果为 true，则禁用该组件。",
      "default": "false",
      "value": "",
      "type": "bool",
      "required": false
    },
    "disabledItemsFocusable": {
      "description": "If true, will allow focus on disabled items.",
      "description_zh": "如果为 true，则允许将焦点放在禁用的项目上。",
      "default": "false",
      "value": "",
      "type": "bool",
      "required": false
    },
    "disableListWrap": {
      "description": "If true, the list box in the popup will not wrap focus.",
      "description_zh": "如果为 true，则弹出窗口中的列表框不会换行焦点。",
      "default": "false",
      "value": "",
      "type": "bool",
      "required": false
    },
    "disablePortal": {
      "description": "If true, the Popper content will be under the DOM hierarchy of the parent component.",
      "description_zh": "如果为 true，则 Popper 内容将位于父组件的 DOM 层次结构下。",
      "default": "false",
      "value": "",
      "type": "bool",
      "required": false
    },
    "filterOptions": {
      "description": "A function that determines the filtered options to be rendered on search.Signature:function(options: Array, state: object) => Arrayoptions The options to render.state The state of the component.",
      "description_zh": "一个函数，用于确定要在搜索时呈现的筛选选项。Signature：function（options： Array， state： object） => Arrayoptions render.state 的选项 组件的状态。",
      "default": "createFilterOptions()",
      "value": "",
      "type": "func",
      "required": false
    },
    "filterSelectedOptions": {
      "description": "If true, hide the selected options from the list box.",
      "description_zh": "如果为 true，则从列表框中隐藏所选选项。",
      "default": "false",
      "value": "",
      "type": "bool",
      "required": false
    },
    "forcePopupIcon": {
      "description": "Force the visibility display of the popup icon.",
      "description_zh": "强制显示弹出图标的可见性。",
      "default": "auto",
      "value": "",
      "type": "auto| bool",
      "required": false
    },
    "freeSolo": {
      "description": "If true, the Autocomplete is free solo, meaning that the user input is not bound to provided options.",
      "description_zh": "如果为 true，则自动完成是自由的，这意味着用户输入未绑定到提供的选项。",
      "default": "false",
      "value": "",
      "type": "bool",
      "required": false
    },
    "fullWidth": {
      "description": "If true, the input will take up the full width of its container.",
      "description_zh": "如果为 true，则输入将占用其容器的整个宽度。",
      "default": "false",
      "value": "",
      "type": "bool",
      "required": false
    },
    "getLimitTagsText": {
      "description": "The label to display when the tags are truncated (limitTags).Signature:function(more: number) => ReactNodemore The number of truncated tags.",
      "description_zh": "截断标记时要显示的标签 （limitTags）。Signature：function（more： number） => ReactNodemore 截断标签的数量。",
      "default": "(more) => `+${more}`",
      "value": "",
      "type": "func",
      "required": false
    },
    "getOptionDisabled": {
      "description": "Used to determine the disabled state for a given option.Signature:function(option: Value) => booleanoption The option to test.",
      "description_zh": "用于确定给定选项的禁用状态。Signature：function（option： Value） => booleanoption 测试选项。",
      "default": "-",
      "value": "",
      "type": "func",
      "required": false
    },
    "getOptionKey": {
      "description": "Used to determine the key for a given option. This can be useful when the labels of options are not unique (since labels are used as keys by default).Signature:function(option: Value) => string | numberoption The option to get the key for.",
      "description_zh": "用于确定给定选项的键。当选项的标签不唯一时，这可能很有用（因为标签默认用作键）。Signature：function（option： Value） => 字符串 |number选项 获取其密钥的选项。",
      "default": "-",
      "value": "",
      "type": "func",
      "required": false
    },
    "getOptionLabel": {
      "description": "Used to determine the string value for a given option. It's used to fill the input (and the list box options if renderOption is not provided).If used in free solo mode, it must accept both the type of the options and a string.Signature:function(option: Value) => string",
      "description_zh": "用于确定给定选项的字符串值。它用于填充输入（如果未提供 renderOption，则用于填充列表框选项）。如果在自由独奏模式下使用，它必须同时接受选项的类型和字符串。Signature：function（option： Value） =>字符串",
      "default": "(option) => option.label ?? option",
      "value": "",
      "type": "func",
      "required": false
    },
    "groupBy": {
      "description": "If provided, the options will be grouped under the returned string. The groupBy value is also used as the text for group headings when renderGroup is not provided.Signature:function(options: Value) => stringoptions The options to group.",
      "description_zh": "如果提供，选项将分组在返回的字符串下。当未提供 renderGroup 时，groupBy 值也用作组标题的文本。Signature：function（options： Value） => stringoptions 要分组的选项。",
      "default": "-",
      "value": "",
      "type": "func",
      "required": false
    },
    "handleHomeEndKeys": {
      "description": "If true, the component handles the \"Home\" and \"End\" keys when the popup is open. It should move focus to the first option and last option, respectively.",
      "description_zh": "如果为 true，则该组件在弹出窗口打开时处理“Home”和“End”键。它应该将焦点分别移到第一个选项和最后一个选项上。",
      "default": "!props.freeSolo",
      "value": "",
      "type": "bool",
      "required": false
    },
    "id": {
      "description": "This prop is used to help implement the accessibility logic. If you don't provide an id it will fall back to a randomly generated one.",
      "description_zh": "此道具用于帮助实现辅助功能逻辑。如果您不提供 id，它将回退到随机生成的 id。",
      "default": "-",
      "value": "",
      "type": "string",
      "required": false
    },
    "includeInputInList": {
      "description": "If true, the highlight can move to the input.",
      "description_zh": "如果为 true，则突出显示可以移动到输入。",
      "default": "false",
      "value": "",
      "type": "bool",
      "required": false
    },
    "inputValue": {
      "description": "The input value.",
      "description_zh": "输入值。",
      "default": "-",
      "value": "",
      "type": "string",
      "required": false
    },
    "isOptionEqualToValue": {
      "description": "Used to determine if the option represents the given value. Uses strict equality by default. ⚠️ Both arguments need to be handled, an option can only match with one value.Signature:function(option: Value, value: Value) => booleanoption The option to test.value The value to test against.",
      "description_zh": "用于确定选项是否表示给定值。默认情况下使用严格相等。⚠️ 两个参数都需要处理，一个选项只能与一个值匹配。Signature：function（option： Value， value： Value） => booleanoption test.value 的选项 要测试的值。",
      "default": "-",
      "value": "",
      "type": "func",
      "required": false
    },
    "limitTags": {
      "description": "The maximum number of tags that will be visible when not focused. Set -1 to disable the limit.",
      "description_zh": "未聚焦时可见的最大标签数。设置 -1 以禁用限制。",
      "default": "-1",
      "value": "",
      "type": "integer",
      "required": false
    },
    "ListboxComponent": {
      "description": "The component used to render the listbox.",
      "description_zh": "用于呈现列表框的组件。",
      "default": "ul",
      "value": "",
      "type": "elementType",
      "required": false
    },
    "ListboxProps": {
      "description": "Props applied to the Listbox element.",
      "description_zh": "应用于 Listbox 元素的道具。",
      "default": "-",
      "value": "",
      "type": "object",
      "required": false
    },
    "loading": {
      "description": "If true, the component is in a loading state. This shows the loadingText in place of suggestions (only if there are no suggestions to show, for example options are empty).",
      "description_zh": "如果为 true，则组件处于加载状态。这将显示 loadingText 代替建议（仅当没有要显示的建议时，例如选项为空）。",
      "default": "false",
      "value": "",
      "type": "bool",
      "required": false
    },
    "loadingText": {
      "description": "Text to display when in a loading state.For localization purposes, you can use the provided translations.",
      "description_zh": "处于加载状态时要显示的文本。出于本地化目的，您可以使用提供的翻译。",
      "default": "Loading…",
      "value": "",
      "type": "node",
      "required": false
    },
    "multiple": {
      "description": "If true, value must be an array and the menu will support multiple selections.",
      "description_zh": "如果为 true，则 value 必须为数组，并且菜单将支持多个选择。",
      "default": "false",
      "value": "",
      "type": "bool",
      "required": false
    },
    "noOptionsText": {
      "description": "Text to display when there are no options.For localization purposes, you can use the provided translations.",
      "description_zh": "没有选项时要显示的文本。出于本地化目的，您可以使用提供的翻译。",
      "default": "No options",
      "value": "",
      "type": "node",
      "required": false
    },
    "onChange": {
      "description": "Callback fired when the value changes.Signature:function(event: React.SyntheticEvent, value: Value | Array, reason: string, details?: string) => voidevent The event source of the callback.value The new value of the component.reason One of \"createOption\", \"selectOption\", \"removeOption\", \"blur\" or \"clear\".",
      "description_zh": "当值更改时触发回调。Signature：function（event： React.SyntheticEvent， value： 值 |Array， reason： string， details？： string） => voidevent callback.value 的事件源 component.reason 的新值 “createOption”、“selectOption”、“removeOption”、“blur” 或 “clear” 之一。",
      "default": "-",
      "value": "",
      "type": "func",
      "required": false
    },
    "onClose": {
      "description": "Callback fired when the popup requests to be closed. Use in controlled mode (see open).Signature:function(event: React.SyntheticEvent, reason: string) => voidevent The event source of the callback.reason Can be: \"toggleInput\", \"escape\", \"selectOption\", \"removeOption\", \"blur\".",
      "description_zh": "当弹出窗口请求关闭时触发回调。在受控模式下使用（见打开）。Signature：function（event： React.SyntheticEvent， reason： string） => voidevent callback.reason 的事件源可以是： “toggleInput”， “escape”， “selectOption”， “removeOption”， “blur”。",
      "default": "-",
      "value": "",
      "type": "func",
      "required": false
    },
    "onHighlightChange": {
      "description": "Callback fired when the highlight option changes.Signature:function(event: React.SyntheticEvent, option: Value, reason: string) => voidevent The event source of the callback.option The highlighted option.reason Can be: \"keyboard\", \"auto\", \"mouse\", \"touch\".",
      "description_zh": "当突出显示选项更改时触发回调。Signature：function（event： React.SyntheticEvent， option： Value， reason： string） =>voidevent callback.option 的事件源 突出显示的 option.reason 可以是：“keyboard”、“auto”、“mouse”、“touch”。",
      "default": "-",
      "value": "",
      "type": "func",
      "required": false
    },
    "onInputChange": {
      "description": "Callback fired when the input value changes.Signature:function(event: React.SyntheticEvent, value: string, reason: string) => voidevent The event source of the callback.value The new value of the text input.reason Can be: \"input\" (user input), \"reset\" (programmatic change), \"clear\".",
      "description_zh": "当输入值更改时触发回调。Signature：function（event： React.SyntheticEvent， value： string， reason： string） =>voidevent callback.value 的事件源 文本 input.reason 的新值可以是：“input”（用户输入）、“reset”（编程更改）、“clear”。",
      "default": "-",
      "value": "",
      "type": "func",
      "required": false
    },
    "onOpen": {
      "description": "Callback fired when the popup requests to be opened. Use in controlled mode (see open).Signature:function(event: React.SyntheticEvent) => voidevent The event source of the callback.",
      "description_zh": "当弹出窗口请求打开时触发回调。在受控模式下使用（见打开）。Signature：function（event： React.SyntheticEvent） => voidevent 回调的事件源。",
      "default": "-",
      "value": "",
      "type": "func",
      "required": false
    },
    "open": {
      "description": "If true, the component is shown.",
      "description_zh": "如果为 true，则显示组件。",
      "default": "-",
      "value": "",
      "type": "bool",
      "required": false
    },
    "openOnFocus": {
      "description": "If true, the popup will open on input focus.",
      "description_zh": "如果为 true，则弹出窗口将在输入焦点时打开。",
      "default": "false",
      "value": "",
      "type": "bool",
      "required": false
    },
    "openText": {
      "description": "Override the default text for the open popup icon button.For localization purposes, you can use the provided translations.",
      "description_zh": "覆盖打开弹出图标按钮的默认文本。出于本地化目的，您可以使用提供的翻译。",
      "default": "Open",
      "value": "",
      "type": "string",
      "required": false
    },
    "PaperComponent": {
      "description": "The component used to render the body of the popup.",
      "description_zh": "用于呈现弹出窗口正文的组件。",
      "default": "Paper",
      "value": "",
      "type": "elementType",
      "required": false
    },
    "PopperComponent": {
      "description": "The component used to position the popup.",
      "description_zh": "用于定位弹出窗口的组件。",
      "default": "Popper",
      "value": "",
      "type": "elementType",
      "required": false
    },
    "popupIcon": {
      "description": "The icon to display in place of the default popup icon.",
      "description_zh": "要代替默认弹出图标显示的图标。",
      "default": "<ArrowDropDownIcon />",
      "value": "",
      "type": "node",
      "required": false
    },
    "readOnly": {
      "description": "If true, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.",
      "description_zh": "如果为 true，则组件变为只读。它还支持无法删除标签的多个标签。",
      "default": "false",
      "value": "",
      "type": "bool",
      "required": false
    },
    "renderGroup": {
      "description": "Render the group.Signature:function(params: AutocompleteRenderGroupParams) => ReactNodeparams The group to render.",
      "description_zh": "渲染组。Signature：function（params： AutocompleteRenderGroupParams） => ReactNodeparams 要呈现的组。",
      "default": "-",
      "value": "",
      "type": "func",
      "required": false
    },
    "renderOption": {
      "description": "Render the option, use getOptionLabel by default.Signature:function(props: object, option: Value, state: object, ownerState: object) => ReactNodeprops The props to apply on the li element.option The option to render.state The state of each option.ownerState The state of the Autocomplete component.",
      "description_zh": "呈现选项，默认使用 getOptionLabel。Signature：function（props： object， option： Value， state： object， ownerState： object） => ReactNodeprops 要应用于 li 元素的 props.option render.state 选项 每个选项的状态.ownerState 自动完成组件的状态。",
      "default": "-",
      "value": "",
      "type": "func",
      "required": false
    },
    "renderTags": {
      "description": "Render the selected value.Signature:function(value: Array, getTagProps: function, ownerState: object) => ReactNodevalue The value provided to the component.getTagProps A tag props getter.ownerState The state of the Autocomplete component.",
      "description_zh": "呈现所选值。Signature：function（value： Array， getTagProps： function， ownerState： object） => ReactNodevalue 提供给 component.getTagProps 的值 A 标签 props getter.ownerState 自动完成组件的状态。",
      "default": "-",
      "value": "",
      "type": "func",
      "required": false
    },
    "selectOnFocus": {
      "description": "If true, the input's text is selected on focus. It helps the user clear the selected value.",
      "description_zh": "如果为 true，则在焦点上选择输入的文本。它可以帮助用户清除所选值。",
      "default": "!props.freeSolo",
      "value": "",
      "type": "bool",
      "required": false
    },
    "size": {
      "description": "The size of the component.",
      "description_zh": "组件的大小。",
      "default": "medium",
      "value": "",
      "type": "small| medium| string",
      "required": false
    },
    "slotProps": {
      "description": "The props used for each slot inside.",
      "description_zh": "里面每个插槽使用的道具。",
      "default": "{}",
      "value": "",
      "type": "{ clearIndicator?: object, paper?: object, popper?: object, popupIndicator?: object }",
      "required": false
    },
    "sx": {
      "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
      "description_zh": "允许定义系统覆盖以及其他 CSS 样式的系统属性。有关更多详细信息，请参阅“sx”页面。",
      "default": "-",
      "value": "",
      "type": "Array<func| object| bool>| func| object",
      "required": false
    },
    "value": {
      "description": "The value of the autocomplete.The value must have reference equality with the option in order to be selected. You can customize the equality behavior with the isOptionEqualToValue prop.",
      "description_zh": "自动完成的值。该值必须与选项具有引用相等性才能被选中。您可以使用 isOptionEqualToValue 属性自定义相等行为。",
      "default": "-",
      "value": "",
      "type": "any",
      "required": false
    }
  },
  "link": "https://mui.com/material-ui/api/autocomplete/",
  "link_zh": "https://mui.com/material-ui/api/autocomplete/",
  "typeDetail": {},
  "events": [
    {
      "name": "onChange",
      "description": "Callback fired when the value changes.Signature:event The event source of the callback.value The new value of the component.reason One of \"createOption\", \"selectOption\", \"removeOption\", \"blur\" or \"clear\".",
      "description_zh": "当值更改时触发回调。Signature：event callback.value 的事件源 component.reason 的新值 “createOption”、“selectOption”、“removeOption”、“blur” 或 “clear” 之一。",
      "params": "function(event: React.SyntheticEvent, value: Value | Array, reason: string, details?: string) => void",
      "value": ""
    },
    {
      "name": "onClose",
      "description": "Callback fired when the popup requests to be closed. Use in controlled mode (see open).Signature:event The event source of the callback.reason Can be: \"toggleInput\", \"escape\", \"selectOption\", \"removeOption\", \"blur\".",
      "description_zh": "当弹出窗口请求关闭时触发回调。在受控模式下使用（见打开）。signature：event callback.reason 的事件源可以是：“toggleInput”、“escape”、“selectOption”、“removeOption”、“blur”。",
      "params": "function(event: React.SyntheticEvent, reason: string) => void",
      "value": ""
    },
    {
      "name": "onHighlightChange",
      "description": "Callback fired when the highlight option changes.Signature:event The event source of the callback.option The highlighted option.reason Can be: \"keyboard\", \"auto\", \"mouse\", \"touch\".",
      "description_zh": "当突出显示选项更改时触发回调。Signature：event callback.option 的事件源 突出显示的 option.reason 可以是：“keyboard”、“auto”、“mouse”、“touch”。",
      "params": "function(event: React.SyntheticEvent, option: Value, reason: string) => void",
      "value": ""
    },
    {
      "name": "onInputChange",
      "description": "Callback fired when the input value changes.Signature:event The event source of the callback.value The new value of the text input.reason Can be: \"input\" (user input), \"reset\" (programmatic change), \"clear\".",
      "description_zh": "当输入值更改时触发回调。Signature：event callback.value 的事件源 文本 input.reason 的新值可以是：“input”（用户输入）、“reset”（编程更改）、“clear”。",
      "params": "function(event: React.SyntheticEvent, value: string, reason: string) => void",
      "value": ""
    },
    {
      "name": "onOpen",
      "description": "Callback fired when the popup requests to be opened. Use in controlled mode (see open).Signature:event The event source of the callback.",
      "description_zh": "当弹出窗口请求打开时触发回调。在受控模式下使用（见打开）。Signature：event 回调的事件源。",
      "params": "function(event: React.SyntheticEvent) => void",
      "value": ""
    }
  ],
  "methods": [],
  "slots": [],
  "suggestions": [],
  "filename": "Autocomplete"
}
