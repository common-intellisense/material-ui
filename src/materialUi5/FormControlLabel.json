{
  "name": "FormControlLabel",
  "props": {
    "control": {
      "description": "A control element. For instance, it can be a Radio, a Switch or a Checkbox.",
      "description_zh": "控制元素。例如，它可以是收音机、开关或复选框。",
      "default": "-",
      "value": "",
      "type": "element",
      "required": true
    },
    "checked": {
      "description": "If true, the component appears selected.",
      "description_zh": "如果为 true，则组件将显示为选中状态。",
      "default": "-",
      "value": "",
      "type": "bool",
      "required": false
    },
    "classes": {
      "description": "Override or extend the styles applied to the component.See CSS classes API below for more details.",
      "description_zh": "覆盖或扩展应用于组件的样式。有关详细信息，请参阅下面的 CSS 类 API。",
      "default": "-",
      "value": "",
      "type": "object",
      "required": false
    },
    "componentsProps": {
      "description": "The props used for each slot inside.",
      "description_zh": "里面每个插槽使用的道具。",
      "default": "{}",
      "value": "",
      "type": "{ typography?: object }",
      "required": false
    },
    "disabled": {
      "description": "If true, the control is disabled.",
      "description_zh": "如果为 true，则禁用该控件。",
      "default": "-",
      "value": "",
      "type": "bool",
      "required": false
    },
    "disableTypography": {
      "description": "If true, the label is rendered as it is passed without an additional typography node.",
      "description_zh": "如果为 true，则在传递标签时呈现标签，而无需额外的排版节点。",
      "default": "-",
      "value": "",
      "type": "bool",
      "required": false
    },
    "inputRef": {
      "description": "Pass a ref to the input element.",
      "description_zh": "将 ref 传递给输入元素。",
      "default": "-",
      "value": "",
      "type": "ref",
      "required": false
    },
    "label": {
      "description": "A text or an element to be used in an enclosing label element.",
      "description_zh": "要在封闭的标签元素中使用的文本或元素。",
      "default": "-",
      "value": "",
      "type": "node",
      "required": false
    },
    "labelPlacement": {
      "description": "The position of the label.",
      "description_zh": "标签的位置。",
      "default": "end",
      "value": "",
      "type": "bottom| end| start| top",
      "required": false
    },
    "onChange": {
      "description": "Callback fired when the state is changed.Signature:function(event: React.SyntheticEvent) => voidevent The event source of the callback. You can pull out the new checked state by accessing event.target.checked (boolean).",
      "description_zh": "更改状态时触发回调。Signature：function（event： React.SyntheticEvent） => voidevent 回调的事件源。您可以通过访问 event.target.checked（布尔值）来提取新的检查状态。",
      "default": "-",
      "value": "",
      "type": "func",
      "required": false
    },
    "required": {
      "description": "If true, the label will indicate that the input is required.",
      "description_zh": "如果为 true，则标签将指示需要输入。",
      "default": "-",
      "value": "",
      "type": "bool",
      "required": false
    },
    "slotProps": {
      "description": "The props used for each slot inside.",
      "description_zh": "里面每个插槽使用的道具。",
      "default": "{}",
      "value": "",
      "type": "{ typography?: object }",
      "required": false
    },
    "sx": {
      "description": "The system prop that allows defining system overrides as well as additional CSS styles.See the `sx` page for more details.",
      "description_zh": "允许定义系统覆盖以及其他 CSS 样式的系统属性。有关更多详细信息，请参阅“sx”页面。",
      "default": "-",
      "value": "",
      "type": "Array<func| object| bool>| func| object",
      "required": false
    },
    "value": {
      "description": "The value of the component.",
      "description_zh": "组件的值。",
      "default": "-",
      "value": "",
      "type": "any",
      "required": false
    }
  },
  "link": "https://mui.com/material-ui/api/form-control-label/",
  "link_zh": "https://mui.com/material-ui/api/form-control-label/",
  "typeDetail": {},
  "events": [
    {
      "name": "onChange",
      "description": "Callback fired when the state is changed.Signature:event The event source of the callback. You can pull out the new checked state by accessing event.target.checked (boolean).",
      "description_zh": "更改状态时触发回调。Signature：event 回调的事件源。您可以通过访问 event.target.checked（布尔值）来提取新的检查状态。",
      "params": "function(event: React.SyntheticEvent) => void",
      "value": ""
    }
  ],
  "methods": [],
  "slots": [],
  "suggestions": [],
  "filename": "FormControlLabel"
}
